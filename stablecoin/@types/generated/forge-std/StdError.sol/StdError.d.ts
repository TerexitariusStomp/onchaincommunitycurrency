/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface StdErrorContract extends Truffle.Contract<StdErrorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<StdErrorInstance>;
}

type AllEvents = never;

export interface StdErrorInstance extends Truffle.ContractInstance {
  arithmeticError(txDetails?: Truffle.TransactionDetails): Promise<string>;

  assertionError(txDetails?: Truffle.TransactionDetails): Promise<string>;

  divisionError(txDetails?: Truffle.TransactionDetails): Promise<string>;

  encodeStorageError(txDetails?: Truffle.TransactionDetails): Promise<string>;

  enumConversionError(txDetails?: Truffle.TransactionDetails): Promise<string>;

  indexOOBError(txDetails?: Truffle.TransactionDetails): Promise<string>;

  memOverflowError(txDetails?: Truffle.TransactionDetails): Promise<string>;

  popError(txDetails?: Truffle.TransactionDetails): Promise<string>;

  zeroVarError(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    arithmeticError(txDetails?: Truffle.TransactionDetails): Promise<string>;

    assertionError(txDetails?: Truffle.TransactionDetails): Promise<string>;

    divisionError(txDetails?: Truffle.TransactionDetails): Promise<string>;

    encodeStorageError(txDetails?: Truffle.TransactionDetails): Promise<string>;

    enumConversionError(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    indexOOBError(txDetails?: Truffle.TransactionDetails): Promise<string>;

    memOverflowError(txDetails?: Truffle.TransactionDetails): Promise<string>;

    popError(txDetails?: Truffle.TransactionDetails): Promise<string>;

    zeroVarError(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
