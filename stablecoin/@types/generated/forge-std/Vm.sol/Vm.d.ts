/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface VmContract extends Truffle.Contract<VmInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<VmInstance>;
}

type AllEvents = never;

export interface VmInstance extends Truffle.ContractInstance {
  accesses: {
    (target: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      target: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: string[] }>;
    sendTransaction(
      target: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  activeFork(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  addr(
    privateKey: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  allowCheatcodes: {
    (account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  assume(
    condition: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  chainId: {
    (
      newChainId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newChainId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newChainId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newChainId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  clearMockedCalls: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  closeFile: {
    (path: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(path: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  coinbase: {
    (newCoinbase: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newCoinbase: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newCoinbase: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newCoinbase: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  computeCreateAddress(
    deployer: string,
    nonce: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  copyFile: {
    (from: string, to: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      from: string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      from: string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createDir: {
    (
      path: string,
      recursive: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      path: string,
      recursive: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      path: string,
      recursive: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      path: string,
      recursive: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deal: {
    (
      account: string,
      newBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      newBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      newBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      newBalance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deleteSnapshot: {
    (
      snapshotId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      snapshotId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      snapshotId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      snapshotId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deleteSnapshots: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  difficulty: {
    (
      newDifficulty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newDifficulty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newDifficulty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newDifficulty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  dumpState: {
    (pathToStateJson: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      pathToStateJson: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      pathToStateJson: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      pathToStateJson: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  etch: {
    (
      target: string,
      newRuntimeBytecode: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      target: string,
      newRuntimeBytecode: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      target: string,
      newRuntimeBytecode: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string,
      newRuntimeBytecode: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  eth_getLogs: {
    (
      fromBlock: number | BN | string,
      toBlock: number | BN | string,
      target: string,
      topics: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      fromBlock: number | BN | string,
      toBlock: number | BN | string,
      target: string,
      topics: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        emitter: string;
        topics: string[];
        data: string;
        blockHash: string;
        blockNumber: BN;
        transactionHash: string;
        transactionIndex: BN;
        logIndex: BN;
        removed: boolean;
      }[]
    >;
    sendTransaction(
      fromBlock: number | BN | string,
      toBlock: number | BN | string,
      target: string,
      topics: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      fromBlock: number | BN | string,
      toBlock: number | BN | string,
      target: string,
      topics: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exists: {
    (path: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  expectSafeMemory: {
    (
      min: number | BN | string,
      max: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      min: number | BN | string,
      max: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      min: number | BN | string,
      max: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      min: number | BN | string,
      max: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  expectSafeMemoryCall: {
    (
      min: number | BN | string,
      max: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      min: number | BN | string,
      max: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      min: number | BN | string,
      max: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      min: number | BN | string,
      max: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fee: {
    (
      newBasefee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newBasefee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newBasefee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newBasefee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  ffi: {
    (commandInput: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      commandInput: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      commandInput: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      commandInput: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fsMetadata(
    path: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    isDir: boolean;
    isSymlink: boolean;
    length: BN;
    readOnly: boolean;
    modified: BN;
    accessed: BN;
    created: BN;
  }>;

  getBlockNumber(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getBlockTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCode(
    artifactPath: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getDeployedCode(
    artifactPath: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getLabel(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getMappingKeyAndParentOf: {
    (
      target: string,
      elementSlot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      target: string,
      elementSlot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: boolean; 1: string; 2: string }>;
    sendTransaction(
      target: string,
      elementSlot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string,
      elementSlot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getMappingLength: {
    (
      target: string,
      mappingSlot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      target: string,
      mappingSlot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      target: string,
      mappingSlot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string,
      mappingSlot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getMappingSlotAt: {
    (
      target: string,
      mappingSlot: string,
      idx: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      target: string,
      mappingSlot: string,
      idx: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      target: string,
      mappingSlot: string,
      idx: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string,
      mappingSlot: string,
      idx: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getRecordedLogs: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ topics: string[]; data: string; emitter: string }[]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isDir: {
    (path: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isFile: {
    (path: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isPersistent(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  keyExists(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  label: {
    (
      account: string,
      newLabel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      newLabel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      newLabel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      newLabel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  load(
    target: string,
    slot: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  loadAllocs: {
    (pathToAllocsJson: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      pathToAllocsJson: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      pathToAllocsJson: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      pathToAllocsJson: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  parseAddress(
    stringifiedValue: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  parseBool(
    stringifiedValue: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  parseBytes(
    stringifiedValue: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  parseBytes32(
    stringifiedValue: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  parseInt(
    stringifiedValue: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  parseJsonAddress(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  parseJsonAddressArray(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  parseJsonBool(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  parseJsonBoolArray(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean[]>;

  parseJsonBytes(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  parseJsonBytes32(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  parseJsonBytes32Array(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  parseJsonBytesArray(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  parseJsonInt(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  parseJsonIntArray(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  parseJsonKeys(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  parseJsonString(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  parseJsonStringArray(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  parseJsonUint(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  parseJsonUintArray(
    json: string,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  parseUint(
    stringifiedValue: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  pauseGasMetering: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  prevrandao: {
    (newPrevrandao: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newPrevrandao: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newPrevrandao: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newPrevrandao: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  projectRoot(txDetails?: Truffle.TransactionDetails): Promise<string>;

  readCallers: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string; 2: string }>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  readFile(
    path: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  readFileBinary(
    path: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  readLine(
    path: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  readLink(
    linkPath: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  record: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  recordLogs: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  rememberKey: {
    (
      privateKey: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      privateKey: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      privateKey: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      privateKey: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeDir: {
    (
      path: string,
      recursive: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      path: string,
      recursive: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      path: string,
      recursive: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      path: string,
      recursive: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeFile: {
    (path: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(path: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  resetNonce: {
    (account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  resumeGasMetering: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  revertTo: {
    (
      snapshotId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      snapshotId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      snapshotId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      snapshotId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revertToAndDelete: {
    (
      snapshotId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      snapshotId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      snapshotId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      snapshotId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  roll: {
    (
      newHeight: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newHeight: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newHeight: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newHeight: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  rpc: {
    (
      method: string,
      params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      method: string,
      params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      method: string,
      params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      method: string,
      params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  rpcUrl(
    rpcAlias: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  rpcUrlStructs(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ key: string; url: string }[]>;

  rpcUrls(txDetails?: Truffle.TransactionDetails): Promise<string[][]>;

  selectFork: {
    (
      forkId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      forkId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      forkId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      forkId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  serializeJson: {
    (
      objectKey: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      objectKey: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      objectKey: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      objectKey: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setEnv: {
    (
      name: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      name: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setNonce: {
    (
      account: string,
      newNonce: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      newNonce: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      newNonce: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      newNonce: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setNonceUnsafe: {
    (
      account: string,
      newNonce: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      newNonce: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      newNonce: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      newNonce: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  signP256(
    privateKey: number | BN | string,
    digest: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string }>;

  skip: {
    (skipTest: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      skipTest: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      skipTest: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      skipTest: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sleep: {
    (
      duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  snapshot: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  startMappingRecording: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  startStateDiffRecording: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  stopAndReturnStateDiff: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        chainInfo: { forkId: BN; chainId: BN };
        kind: BN;
        account: string;
        accessor: string;
        initialized: boolean;
        oldBalance: BN;
        newBalance: BN;
        deployedCode: string;
        value: BN;
        data: string;
        reverted: boolean;
        storageAccesses: {
          account: string;
          slot: string;
          isWrite: boolean;
          previousValue: string;
          newValue: string;
          reverted: boolean;
        }[];
      }[]
    >;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  stopBroadcast: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  stopMappingRecording: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  stopPrank: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  store: {
    (
      target: string,
      slot: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      target: string,
      slot: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      target: string,
      slot: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string,
      slot: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tryFfi: {
    (commandInput: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      commandInput: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ exitCode: BN; stdout: string; stderr: string }>;
    sendTransaction(
      commandInput: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      commandInput: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  txGasPrice: {
    (
      newGasPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newGasPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newGasPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newGasPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unixTime: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  warp: {
    (
      newTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  writeFile: {
    (
      path: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      path: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      path: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      path: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  writeFileBinary: {
    (
      path: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      path: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      path: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      path: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  writeLine: {
    (
      path: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      path: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      path: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      path: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    accesses: {
      (target: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        target: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: string[]; 1: string[] }>;
      sendTransaction(
        target: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        target: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    activeFork(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    addr(
      privateKey: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    allowCheatcodes: {
      (account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    assume(
      condition: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    chainId: {
      (
        newChainId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newChainId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newChainId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newChainId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    clearMockedCalls: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    closeFile: {
      (path: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(path: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    coinbase: {
      (newCoinbase: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newCoinbase: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newCoinbase: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newCoinbase: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    computeCreateAddress(
      deployer: string,
      nonce: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    copyFile: {
      (
        from: string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        from: string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createDir: {
      (
        path: string,
        recursive: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        path: string,
        recursive: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        path: string,
        recursive: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        path: string,
        recursive: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deal: {
      (
        account: string,
        newBalance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        newBalance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        newBalance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        newBalance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deleteSnapshot: {
      (
        snapshotId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        snapshotId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        snapshotId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        snapshotId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deleteSnapshots: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    difficulty: {
      (
        newDifficulty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newDifficulty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newDifficulty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newDifficulty: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    dumpState: {
      (
        pathToStateJson: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        pathToStateJson: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        pathToStateJson: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        pathToStateJson: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    etch: {
      (
        target: string,
        newRuntimeBytecode: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        target: string,
        newRuntimeBytecode: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        target: string,
        newRuntimeBytecode: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        target: string,
        newRuntimeBytecode: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    eth_getLogs: {
      (
        fromBlock: number | BN | string,
        toBlock: number | BN | string,
        target: string,
        topics: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        fromBlock: number | BN | string,
        toBlock: number | BN | string,
        target: string,
        topics: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<
        {
          emitter: string;
          topics: string[];
          data: string;
          blockHash: string;
          blockNumber: BN;
          transactionHash: string;
          transactionIndex: BN;
          logIndex: BN;
          removed: boolean;
        }[]
      >;
      sendTransaction(
        fromBlock: number | BN | string,
        toBlock: number | BN | string,
        target: string,
        topics: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        fromBlock: number | BN | string,
        toBlock: number | BN | string,
        target: string,
        topics: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    exists: {
      (path: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    expectSafeMemory: {
      (
        min: number | BN | string,
        max: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        min: number | BN | string,
        max: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        min: number | BN | string,
        max: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        min: number | BN | string,
        max: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    expectSafeMemoryCall: {
      (
        min: number | BN | string,
        max: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        min: number | BN | string,
        max: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        min: number | BN | string,
        max: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        min: number | BN | string,
        max: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fee: {
      (
        newBasefee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newBasefee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newBasefee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newBasefee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    ffi: {
      (commandInput: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        commandInput: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        commandInput: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        commandInput: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fsMetadata(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      isDir: boolean;
      isSymlink: boolean;
      length: BN;
      readOnly: boolean;
      modified: BN;
      accessed: BN;
      created: BN;
    }>;

    getBlockNumber(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getBlockTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getCode(
      artifactPath: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getDeployedCode(
      artifactPath: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getLabel(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getMappingKeyAndParentOf: {
      (
        target: string,
        elementSlot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        target: string,
        elementSlot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: boolean; 1: string; 2: string }>;
      sendTransaction(
        target: string,
        elementSlot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        target: string,
        elementSlot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getMappingLength: {
      (
        target: string,
        mappingSlot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        target: string,
        mappingSlot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        target: string,
        mappingSlot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        target: string,
        mappingSlot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getMappingSlotAt: {
      (
        target: string,
        mappingSlot: string,
        idx: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        target: string,
        mappingSlot: string,
        idx: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        target: string,
        mappingSlot: string,
        idx: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        target: string,
        mappingSlot: string,
        idx: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getRecordedLogs: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ topics: string[]; data: string; emitter: string }[]>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    isDir: {
      (path: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isFile: {
      (path: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isPersistent(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    keyExists(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    label: {
      (
        account: string,
        newLabel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        newLabel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        newLabel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        newLabel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    load(
      target: string,
      slot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    loadAllocs: {
      (
        pathToAllocsJson: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        pathToAllocsJson: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        pathToAllocsJson: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        pathToAllocsJson: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    parseAddress(
      stringifiedValue: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    parseBool(
      stringifiedValue: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    parseBytes(
      stringifiedValue: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    parseBytes32(
      stringifiedValue: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    parseInt(
      stringifiedValue: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    parseJsonAddress(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    parseJsonAddressArray(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    parseJsonBool(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    parseJsonBoolArray(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean[]>;

    parseJsonBytes(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    parseJsonBytes32(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    parseJsonBytes32Array(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    parseJsonBytesArray(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    parseJsonInt(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    parseJsonIntArray(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    parseJsonKeys(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    parseJsonString(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    parseJsonStringArray(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    parseJsonUint(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    parseJsonUintArray(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    parseUint(
      stringifiedValue: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    pauseGasMetering: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    prevrandao: {
      (newPrevrandao: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newPrevrandao: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newPrevrandao: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newPrevrandao: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    projectRoot(txDetails?: Truffle.TransactionDetails): Promise<string>;

    readCallers: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: string; 2: string }>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    readFile(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    readFileBinary(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    readLine(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    readLink(
      linkPath: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    record: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    recordLogs: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    rememberKey: {
      (
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    removeDir: {
      (
        path: string,
        recursive: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        path: string,
        recursive: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        path: string,
        recursive: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        path: string,
        recursive: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    removeFile: {
      (path: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(path: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    resetNonce: {
      (account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    resumeGasMetering: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    revertTo: {
      (
        snapshotId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        snapshotId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        snapshotId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        snapshotId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    revertToAndDelete: {
      (
        snapshotId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        snapshotId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        snapshotId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        snapshotId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    roll: {
      (
        newHeight: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newHeight: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newHeight: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newHeight: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    rpc: {
      (
        method: string,
        params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        method: string,
        params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        method: string,
        params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        method: string,
        params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    rpcUrl(
      rpcAlias: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    rpcUrlStructs(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ key: string; url: string }[]>;

    rpcUrls(txDetails?: Truffle.TransactionDetails): Promise<string[][]>;

    selectFork: {
      (
        forkId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        forkId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        forkId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        forkId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    serializeJson: {
      (
        objectKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setEnv: {
      (
        name: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        name: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        name: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        name: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setNonce: {
      (
        account: string,
        newNonce: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        newNonce: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        newNonce: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        newNonce: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setNonceUnsafe: {
      (
        account: string,
        newNonce: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        newNonce: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        newNonce: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        newNonce: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    signP256(
      privateKey: number | BN | string,
      digest: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string }>;

    skip: {
      (skipTest: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        skipTest: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        skipTest: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        skipTest: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sleep: {
      (
        duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    snapshot: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    startMappingRecording: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    startStateDiffRecording: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    stopAndReturnStateDiff: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        txDetails?: Truffle.TransactionDetails
      ): Promise<
        {
          chainInfo: { forkId: BN; chainId: BN };
          kind: BN;
          account: string;
          accessor: string;
          initialized: boolean;
          oldBalance: BN;
          newBalance: BN;
          deployedCode: string;
          value: BN;
          data: string;
          reverted: boolean;
          storageAccesses: {
            account: string;
            slot: string;
            isWrite: boolean;
            previousValue: string;
            newValue: string;
            reverted: boolean;
          }[];
        }[]
      >;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    stopBroadcast: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    stopMappingRecording: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    stopPrank: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    store: {
      (
        target: string,
        slot: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        target: string,
        slot: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        target: string,
        slot: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        target: string,
        slot: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    tryFfi: {
      (commandInput: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        commandInput: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ exitCode: BN; stdout: string; stderr: string }>;
      sendTransaction(
        commandInput: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        commandInput: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    txGasPrice: {
      (
        newGasPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newGasPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newGasPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newGasPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    unixTime: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    warp: {
      (
        newTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    writeFile: {
      (
        path: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        path: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        path: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        path: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    writeFileBinary: {
      (
        path: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        path: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        path: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        path: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    writeLine: {
      (
        path: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        path: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        path: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        path: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "breakpoint(string)": {
      (char: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(char: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        char: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        char: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "breakpoint(string,bool)": {
      (
        char: string,
        value: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        char: string,
        value: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        char: string,
        value: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        char: string,
        value: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "broadcast()": {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    "broadcast(address)": {
      (signer: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        signer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        signer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        signer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "broadcast(uint256)": {
      (
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "computeCreate2Address(bytes32,bytes32)"(
      salt: string,
      initCodeHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "computeCreate2Address(bytes32,bytes32,address)"(
      salt: string,
      initCodeHash: string,
      deployer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "createFork(string)": {
      (urlOrAlias: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        urlOrAlias: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        urlOrAlias: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        urlOrAlias: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "createFork(string,uint256)": {
      (
        urlOrAlias: string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        urlOrAlias: string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        urlOrAlias: string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        urlOrAlias: string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "createFork(string,bytes32)": {
      (
        urlOrAlias: string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        urlOrAlias: string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        urlOrAlias: string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        urlOrAlias: string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "createSelectFork(string,uint256)": {
      (
        urlOrAlias: string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        urlOrAlias: string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        urlOrAlias: string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        urlOrAlias: string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "createSelectFork(string,bytes32)": {
      (
        urlOrAlias: string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        urlOrAlias: string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        urlOrAlias: string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        urlOrAlias: string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "createSelectFork(string)": {
      (urlOrAlias: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        urlOrAlias: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        urlOrAlias: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        urlOrAlias: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "createWallet(string)": {
      (walletLabel: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        walletLabel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        addr: string;
        publicKeyX: BN;
        publicKeyY: BN;
        privateKey: BN;
      }>;
      sendTransaction(
        walletLabel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        walletLabel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "createWallet(uint256)": {
      (
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        addr: string;
        publicKeyX: BN;
        publicKeyY: BN;
        privateKey: BN;
      }>;
      sendTransaction(
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "createWallet(uint256,string)": {
      (
        privateKey: number | BN | string,
        walletLabel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        privateKey: number | BN | string,
        walletLabel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        addr: string;
        publicKeyX: BN;
        publicKeyY: BN;
        privateKey: BN;
      }>;
      sendTransaction(
        privateKey: number | BN | string,
        walletLabel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        privateKey: number | BN | string,
        walletLabel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "deriveKey(string,string,uint32,string)"(
      mnemonic: string,
      derivationPath: string,
      index: number | BN | string,
      language: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    "deriveKey(string,uint32,string)"(
      mnemonic: string,
      index: number | BN | string,
      language: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    "deriveKey(string,uint32)"(
      mnemonic: string,
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    "deriveKey(string,string,uint32)"(
      mnemonic: string,
      derivationPath: string,
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    "envAddress(string)"(
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "envAddress(string,string)"(
      name: string,
      delim: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    "envBool(string)"(
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    "envBool(string,string)"(
      name: string,
      delim: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean[]>;

    "envBytes(string)"(
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "envBytes(string,string)"(
      name: string,
      delim: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    "envBytes32(string,string)"(
      name: string,
      delim: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    "envBytes32(string)"(
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "envInt(string,string)"(
      name: string,
      delim: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    "envInt(string)"(
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    "envOr(string,string,bytes32[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    "envOr(string,string,int256[])"(
      name: string,
      delim: string,
      defaultValue: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    "envOr(string,bool)"(
      name: string,
      defaultValue: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    "envOr(string,address)"(
      name: string,
      defaultValue: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "envOr(string,uint256)"(
      name: string,
      defaultValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    "envOr(string,string,bytes[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    "envOr(string,string,uint256[])"(
      name: string,
      delim: string,
      defaultValue: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    "envOr(string,string,string[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    "envOr(string,bytes)"(
      name: string,
      defaultValue: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "envOr(string,bytes32)"(
      name: string,
      defaultValue: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "envOr(string,int256)"(
      name: string,
      defaultValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    "envOr(string,string,address[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    "envOr(string,string)"(
      name: string,
      defaultValue: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "envOr(string,string,bool[])"(
      name: string,
      delim: string,
      defaultValue: boolean[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean[]>;

    "envString(string,string)"(
      name: string,
      delim: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    "envString(string)"(
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "envUint(string)"(
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    "envUint(string,string)"(
      name: string,
      delim: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    "expectCall(address,uint256,uint64,bytes)": {
      (
        callee: string,
        msgValue: number | BN | string,
        gas: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        callee: string,
        msgValue: number | BN | string,
        gas: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        callee: string,
        msgValue: number | BN | string,
        gas: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        callee: string,
        msgValue: number | BN | string,
        gas: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "expectCall(address,uint256,uint64,bytes,uint64)": {
      (
        callee: string,
        msgValue: number | BN | string,
        gas: number | BN | string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        callee: string,
        msgValue: number | BN | string,
        gas: number | BN | string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        callee: string,
        msgValue: number | BN | string,
        gas: number | BN | string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        callee: string,
        msgValue: number | BN | string,
        gas: number | BN | string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "expectCall(address,uint256,bytes,uint64)": {
      (
        callee: string,
        msgValue: number | BN | string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        callee: string,
        msgValue: number | BN | string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        callee: string,
        msgValue: number | BN | string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        callee: string,
        msgValue: number | BN | string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "expectCall(address,bytes)": {
      (
        callee: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        callee: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        callee: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        callee: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "expectCall(address,bytes,uint64)": {
      (
        callee: string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        callee: string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        callee: string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        callee: string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "expectCall(address,uint256,bytes)": {
      (
        callee: string,
        msgValue: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        callee: string,
        msgValue: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        callee: string,
        msgValue: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        callee: string,
        msgValue: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "expectCallMinGas(address,uint256,uint64,bytes)": {
      (
        callee: string,
        msgValue: number | BN | string,
        minGas: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        callee: string,
        msgValue: number | BN | string,
        minGas: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        callee: string,
        msgValue: number | BN | string,
        minGas: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        callee: string,
        msgValue: number | BN | string,
        minGas: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "expectCallMinGas(address,uint256,uint64,bytes,uint64)": {
      (
        callee: string,
        msgValue: number | BN | string,
        minGas: number | BN | string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        callee: string,
        msgValue: number | BN | string,
        minGas: number | BN | string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        callee: string,
        msgValue: number | BN | string,
        minGas: number | BN | string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        callee: string,
        msgValue: number | BN | string,
        minGas: number | BN | string,
        data: string,
        count: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "expectEmit()": {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    "expectEmit(bool,bool,bool,bool)": {
      (
        checkTopic1: boolean,
        checkTopic2: boolean,
        checkTopic3: boolean,
        checkData: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        checkTopic1: boolean,
        checkTopic2: boolean,
        checkTopic3: boolean,
        checkData: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        checkTopic1: boolean,
        checkTopic2: boolean,
        checkTopic3: boolean,
        checkData: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        checkTopic1: boolean,
        checkTopic2: boolean,
        checkTopic3: boolean,
        checkData: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "expectEmit(bool,bool,bool,bool,address)": {
      (
        checkTopic1: boolean,
        checkTopic2: boolean,
        checkTopic3: boolean,
        checkData: boolean,
        emitter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        checkTopic1: boolean,
        checkTopic2: boolean,
        checkTopic3: boolean,
        checkData: boolean,
        emitter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        checkTopic1: boolean,
        checkTopic2: boolean,
        checkTopic3: boolean,
        checkData: boolean,
        emitter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        checkTopic1: boolean,
        checkTopic2: boolean,
        checkTopic3: boolean,
        checkData: boolean,
        emitter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "expectEmit(address)": {
      (emitter: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        emitter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        emitter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        emitter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "expectRevert(bytes4)": {
      (revertData: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        revertData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        revertData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        revertData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "expectRevert(bytes)": {
      (revertData: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        revertData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        revertData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        revertData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "expectRevert()": {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    "getNonce(address)"(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    "getNonce((address,uint256,uint256,uint256))": {
      (
        wallet: {
          addr: string;
          publicKeyX: number | BN | string;
          publicKeyY: number | BN | string;
          privateKey: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        wallet: {
          addr: string;
          publicKeyX: number | BN | string;
          publicKeyY: number | BN | string;
          privateKey: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        wallet: {
          addr: string;
          publicKeyX: number | BN | string;
          publicKeyY: number | BN | string;
          privateKey: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        wallet: {
          addr: string;
          publicKeyX: number | BN | string;
          publicKeyY: number | BN | string;
          privateKey: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "makePersistent(address[])": {
      (accounts: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        accounts: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        accounts: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        accounts: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "makePersistent(address,address)": {
      (
        account0: string,
        account1: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account0: string,
        account1: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account0: string,
        account1: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account0: string,
        account1: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "makePersistent(address)": {
      (account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "makePersistent(address,address,address)": {
      (
        account0: string,
        account1: string,
        account2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account0: string,
        account1: string,
        account2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account0: string,
        account1: string,
        account2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account0: string,
        account1: string,
        account2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "mockCall(address,uint256,bytes,bytes)": {
      (
        callee: string,
        msgValue: number | BN | string,
        data: string,
        returnData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        callee: string,
        msgValue: number | BN | string,
        data: string,
        returnData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        callee: string,
        msgValue: number | BN | string,
        data: string,
        returnData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        callee: string,
        msgValue: number | BN | string,
        data: string,
        returnData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "mockCall(address,bytes,bytes)": {
      (
        callee: string,
        data: string,
        returnData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        callee: string,
        data: string,
        returnData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        callee: string,
        data: string,
        returnData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        callee: string,
        data: string,
        returnData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "mockCallRevert(address,uint256,bytes,bytes)": {
      (
        callee: string,
        msgValue: number | BN | string,
        data: string,
        revertData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        callee: string,
        msgValue: number | BN | string,
        data: string,
        revertData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        callee: string,
        msgValue: number | BN | string,
        data: string,
        revertData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        callee: string,
        msgValue: number | BN | string,
        data: string,
        revertData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "mockCallRevert(address,bytes,bytes)": {
      (
        callee: string,
        data: string,
        revertData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        callee: string,
        data: string,
        revertData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        callee: string,
        data: string,
        revertData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        callee: string,
        data: string,
        revertData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "parseJson(string)"(
      json: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "parseJson(string,string)"(
      json: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "prank(address,address)": {
      (
        msgSender: string,
        txOrigin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        msgSender: string,
        txOrigin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        msgSender: string,
        txOrigin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        msgSender: string,
        txOrigin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "prank(address)": {
      (msgSender: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "readDir(string,uint64)"(
      path: string,
      maxDepth: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        errorMessage: string;
        path: string;
        depth: BN;
        isDir: boolean;
        isSymlink: boolean;
      }[]
    >;

    "readDir(string,uint64,bool)"(
      path: string,
      maxDepth: number | BN | string,
      followLinks: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        errorMessage: string;
        path: string;
        depth: BN;
        isDir: boolean;
        isSymlink: boolean;
      }[]
    >;

    "readDir(string)"(
      path: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        errorMessage: string;
        path: string;
        depth: BN;
        isDir: boolean;
        isSymlink: boolean;
      }[]
    >;

    "revokePersistent(address[])": {
      (accounts: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        accounts: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        accounts: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        accounts: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "revokePersistent(address)": {
      (account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "rollFork(bytes32)": {
      (txHash: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "rollFork(uint256,uint256)": {
      (
        forkId: number | BN | string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        forkId: number | BN | string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        forkId: number | BN | string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        forkId: number | BN | string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "rollFork(uint256)": {
      (
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "rollFork(uint256,bytes32)": {
      (
        forkId: number | BN | string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        forkId: number | BN | string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        forkId: number | BN | string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        forkId: number | BN | string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "serializeAddress(string,string,address[])": {
      (
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "serializeAddress(string,string,address)": {
      (
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "serializeBool(string,string,bool[])": {
      (
        objectKey: string,
        valueKey: string,
        values: boolean[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        valueKey: string,
        values: boolean[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        valueKey: string,
        values: boolean[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        valueKey: string,
        values: boolean[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "serializeBool(string,string,bool)": {
      (
        objectKey: string,
        valueKey: string,
        value: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        valueKey: string,
        value: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        valueKey: string,
        value: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        valueKey: string,
        value: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "serializeBytes(string,string,bytes[])": {
      (
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "serializeBytes(string,string,bytes)": {
      (
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "serializeBytes32(string,string,bytes32[])": {
      (
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "serializeBytes32(string,string,bytes32)": {
      (
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "serializeInt(string,string,int256)": {
      (
        objectKey: string,
        valueKey: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        valueKey: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        valueKey: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        valueKey: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "serializeInt(string,string,int256[])": {
      (
        objectKey: string,
        valueKey: string,
        values: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        valueKey: string,
        values: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        valueKey: string,
        values: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        valueKey: string,
        values: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "serializeString(string,string,string[])": {
      (
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        valueKey: string,
        values: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "serializeString(string,string,string)": {
      (
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        valueKey: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "serializeUint(string,string,uint256)": {
      (
        objectKey: string,
        valueKey: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        valueKey: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        valueKey: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        valueKey: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "serializeUint(string,string,uint256[])": {
      (
        objectKey: string,
        valueKey: string,
        values: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        objectKey: string,
        valueKey: string,
        values: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        objectKey: string,
        valueKey: string,
        values: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        objectKey: string,
        valueKey: string,
        values: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "sign((address,uint256,uint256,uint256),bytes32)": {
      (
        wallet: {
          addr: string;
          publicKeyX: number | BN | string;
          publicKeyY: number | BN | string;
          privateKey: number | BN | string;
        },
        digest: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        wallet: {
          addr: string;
          publicKeyX: number | BN | string;
          publicKeyY: number | BN | string;
          privateKey: number | BN | string;
        },
        digest: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: string; 2: string }>;
      sendTransaction(
        wallet: {
          addr: string;
          publicKeyX: number | BN | string;
          publicKeyY: number | BN | string;
          privateKey: number | BN | string;
        },
        digest: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        wallet: {
          addr: string;
          publicKeyX: number | BN | string;
          publicKeyY: number | BN | string;
          privateKey: number | BN | string;
        },
        digest: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "sign(uint256,bytes32)"(
      privateKey: number | BN | string,
      digest: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string; 2: string }>;

    "startBroadcast()": {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    "startBroadcast(address)": {
      (signer: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        signer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        signer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        signer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "startBroadcast(uint256)": {
      (
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        privateKey: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "startPrank(address)": {
      (msgSender: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        msgSender: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "startPrank(address,address)": {
      (
        msgSender: string,
        txOrigin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        msgSender: string,
        txOrigin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        msgSender: string,
        txOrigin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        msgSender: string,
        txOrigin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "toBase64(string)"(
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "toBase64(bytes)"(
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "toBase64URL(string)"(
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "toBase64URL(bytes)"(
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "toString(address)"(
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "toString(uint256)"(
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "toString(bytes)"(
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "toString(bool)"(
      value: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "toString(int256)"(
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "toString(bytes32)"(
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    "transact(uint256,bytes32)": {
      (
        forkId: number | BN | string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        forkId: number | BN | string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        forkId: number | BN | string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        forkId: number | BN | string,
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "transact(bytes32)": {
      (txHash: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        txHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "writeJson(string,string,string)": {
      (
        json: string,
        path: string,
        valueKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        json: string,
        path: string,
        valueKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        json: string,
        path: string,
        valueKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        json: string,
        path: string,
        valueKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "writeJson(string,string)": {
      (
        json: string,
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        json: string,
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        json: string,
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        json: string,
        path: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
