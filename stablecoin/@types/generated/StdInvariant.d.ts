/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface StdInvariantContract
  extends Truffle.Contract<StdInvariantInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<StdInvariantInstance>;
}

type AllEvents = never;

export interface StdInvariantInstance extends Truffle.ContractInstance {
  excludeArtifacts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  excludeContracts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  excludeSenders(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  targetArtifactSelectors(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ addr: string; selectors: string[] }[]>;

  targetArtifacts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  targetContracts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  targetInterfaces(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ addr: string; artifacts: string[] }[]>;

  targetSelectors(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ addr: string; selectors: string[] }[]>;

  targetSenders(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  methods: {
    excludeArtifacts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    excludeContracts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    excludeSenders(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    targetArtifactSelectors(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ addr: string; selectors: string[] }[]>;

    targetArtifacts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    targetContracts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    targetInterfaces(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ addr: string; artifacts: string[] }[]>;

    targetSelectors(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ addr: string; selectors: string[] }[]>;

    targetSenders(txDetails?: Truffle.TransactionDetails): Promise<string[]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
