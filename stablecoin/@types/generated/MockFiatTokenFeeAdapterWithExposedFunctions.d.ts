/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface MockFiatTokenFeeAdapterWithExposedFunctionsContract
  extends Truffle.Contract<MockFiatTokenFeeAdapterWithExposedFunctionsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<MockFiatTokenFeeAdapterWithExposedFunctionsInstance>;
}

type AllEvents = never;

export interface MockFiatTokenFeeAdapterWithExposedFunctionsInstance
  extends Truffle.ContractInstance {
  adaptedToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  adapterDecimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOf(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  creditGasFees: {
    (
      refundRecipient: string,
      feeRecipient: string,
      gatewayFeeRecipient: string,
      communityFund: string,
      refund: number | BN | string,
      tipTxFee: number | BN | string,
      gatewayFee: number | BN | string,
      baseTxFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      refundRecipient: string,
      feeRecipient: string,
      gatewayFeeRecipient: string,
      communityFund: string,
      refund: number | BN | string,
      tipTxFee: number | BN | string,
      gatewayFee: number | BN | string,
      baseTxFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      refundRecipient: string,
      feeRecipient: string,
      gatewayFeeRecipient: string,
      communityFund: string,
      refund: number | BN | string,
      tipTxFee: number | BN | string,
      gatewayFee: number | BN | string,
      baseTxFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      refundRecipient: string,
      feeRecipient: string,
      gatewayFeeRecipient: string,
      communityFund: string,
      refund: number | BN | string,
      tipTxFee: number | BN | string,
      gatewayFee: number | BN | string,
      baseTxFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  debitGasFees: {
    (
      from: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      from: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initializeV1: {
    (
      _adaptedToken: string,
      _adapterDecimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _adaptedToken: string,
      _adapterDecimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _adaptedToken: string,
      _adapterDecimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _adaptedToken: string,
      _adapterDecimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  internal_debitedValue(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  internal_downscale(
    value: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  internal_upscale(
    value: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  setVmCallerAddress: {
    (
      newVmCallerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newVmCallerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newVmCallerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newVmCallerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tokenDecimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  upscaleFactor(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    adaptedToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    adapterDecimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    balanceOf(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    creditGasFees: {
      (
        refundRecipient: string,
        feeRecipient: string,
        gatewayFeeRecipient: string,
        communityFund: string,
        refund: number | BN | string,
        tipTxFee: number | BN | string,
        gatewayFee: number | BN | string,
        baseTxFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        refundRecipient: string,
        feeRecipient: string,
        gatewayFeeRecipient: string,
        communityFund: string,
        refund: number | BN | string,
        tipTxFee: number | BN | string,
        gatewayFee: number | BN | string,
        baseTxFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        refundRecipient: string,
        feeRecipient: string,
        gatewayFeeRecipient: string,
        communityFund: string,
        refund: number | BN | string,
        tipTxFee: number | BN | string,
        gatewayFee: number | BN | string,
        baseTxFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        refundRecipient: string,
        feeRecipient: string,
        gatewayFeeRecipient: string,
        communityFund: string,
        refund: number | BN | string,
        tipTxFee: number | BN | string,
        gatewayFee: number | BN | string,
        baseTxFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    debitGasFees: {
      (
        from: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        from: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initializeV1: {
      (
        _adaptedToken: string,
        _adapterDecimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _adaptedToken: string,
        _adapterDecimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _adaptedToken: string,
        _adapterDecimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _adaptedToken: string,
        _adapterDecimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    internal_debitedValue(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    internal_downscale(
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    internal_upscale(
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    setVmCallerAddress: {
      (
        newVmCallerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newVmCallerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newVmCallerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newVmCallerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    tokenDecimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    upscaleFactor(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
