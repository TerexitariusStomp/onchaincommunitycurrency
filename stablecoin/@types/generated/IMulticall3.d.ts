/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IMulticall3Contract
  extends Truffle.Contract<IMulticall3Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IMulticall3Instance>;
}

type AllEvents = never;

export interface IMulticall3Instance extends Truffle.ContractInstance {
  aggregate: {
    (
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string[] }>;
    sendTransaction(
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  aggregate3: {
    (
      calls: { target: string; allowFailure: boolean; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      calls: { target: string; allowFailure: boolean; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ success: boolean; returnData: string }[]>;
    sendTransaction(
      calls: { target: string; allowFailure: boolean; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      calls: { target: string; allowFailure: boolean; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  aggregate3Value: {
    (
      calls: {
        target: string;
        allowFailure: boolean;
        value: number | BN | string;
        callData: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      calls: {
        target: string;
        allowFailure: boolean;
        value: number | BN | string;
        callData: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ success: boolean; returnData: string }[]>;
    sendTransaction(
      calls: {
        target: string;
        allowFailure: boolean;
        value: number | BN | string;
        callData: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      calls: {
        target: string;
        allowFailure: boolean;
        value: number | BN | string;
        callData: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  blockAndAggregate: {
    (
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: BN;
      1: string;
      2: { success: boolean; returnData: string }[];
    }>;
    sendTransaction(
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBasefee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getBlockHash(
    blockNumber: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getBlockNumber(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getChainId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCurrentBlockCoinbase(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getCurrentBlockDifficulty(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCurrentBlockGasLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCurrentBlockTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getEthBalance(
    addr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getLastBlockHash(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tryAggregate: {
    (
      requireSuccess: boolean,
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      requireSuccess: boolean,
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ success: boolean; returnData: string }[]>;
    sendTransaction(
      requireSuccess: boolean,
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      requireSuccess: boolean,
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tryBlockAndAggregate: {
    (
      requireSuccess: boolean,
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      requireSuccess: boolean,
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: BN;
      1: string;
      2: { success: boolean; returnData: string }[];
    }>;
    sendTransaction(
      requireSuccess: boolean,
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      requireSuccess: boolean,
      calls: { target: string; callData: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    aggregate: {
      (
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: string[] }>;
      sendTransaction(
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    aggregate3: {
      (
        calls: { target: string; allowFailure: boolean; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        calls: { target: string; allowFailure: boolean; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ success: boolean; returnData: string }[]>;
      sendTransaction(
        calls: { target: string; allowFailure: boolean; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        calls: { target: string; allowFailure: boolean; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    aggregate3Value: {
      (
        calls: {
          target: string;
          allowFailure: boolean;
          value: number | BN | string;
          callData: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        calls: {
          target: string;
          allowFailure: boolean;
          value: number | BN | string;
          callData: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ success: boolean; returnData: string }[]>;
      sendTransaction(
        calls: {
          target: string;
          allowFailure: boolean;
          value: number | BN | string;
          callData: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        calls: {
          target: string;
          allowFailure: boolean;
          value: number | BN | string;
          callData: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    blockAndAggregate: {
      (
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        0: BN;
        1: string;
        2: { success: boolean; returnData: string }[];
      }>;
      sendTransaction(
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getBasefee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getBlockHash(
      blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getBlockNumber(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getChainId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getCurrentBlockCoinbase(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getCurrentBlockDifficulty(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCurrentBlockGasLimit(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCurrentBlockTimestamp(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getEthBalance(
      addr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getLastBlockHash(txDetails?: Truffle.TransactionDetails): Promise<string>;

    tryAggregate: {
      (
        requireSuccess: boolean,
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        requireSuccess: boolean,
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ success: boolean; returnData: string }[]>;
      sendTransaction(
        requireSuccess: boolean,
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        requireSuccess: boolean,
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    tryBlockAndAggregate: {
      (
        requireSuccess: boolean,
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        requireSuccess: boolean,
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        0: BN;
        1: string;
        2: { success: boolean; returnData: string }[];
      }>;
      sendTransaction(
        requireSuccess: boolean,
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        requireSuccess: boolean,
        calls: { target: string; callData: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
