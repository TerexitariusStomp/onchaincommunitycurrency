/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface DeployImplAndUpgraderContract
  extends Truffle.Contract<DeployImplAndUpgraderInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<DeployImplAndUpgraderInstance>;
}

type AllEvents = never;

export interface DeployImplAndUpgraderInstance
  extends Truffle.ContractInstance {
  IS_SCRIPT(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  deploy: {
    (_impl: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _impl: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string }>;
    sendTransaction(
      _impl: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _impl: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  run: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string }>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setUp: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    IS_SCRIPT(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    deploy: {
      (_impl: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _impl: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: string; 1: string }>;
      sendTransaction(
        _impl: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _impl: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    run: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: string; 1: string }>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    setUp: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
