/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface DeployFiatTokenTestContract
  extends Truffle.Contract<DeployFiatTokenTestInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<DeployFiatTokenTestInstance>;
}

export interface log {
  name: "log";
  args: {
    0: string;
  };
}

export interface log_address {
  name: "log_address";
  args: {
    0: string;
  };
}

export interface log_array_uint256_array {
  name: "log_array";
  args: {
    val: BN[];
    0: BN[];
  };
}

export interface log_array_int256_array {
  name: "log_array";
  args: {
    val: BN[];
    0: BN[];
  };
}

export interface log_array_address_array {
  name: "log_array";
  args: {
    val: string[];
    0: string[];
  };
}

type log_array =
  | log_array_uint256_array
  | log_array_int256_array
  | log_array_address_array;

export interface log_bytes {
  name: "log_bytes";
  args: {
    0: string;
  };
}

export interface log_bytes32 {
  name: "log_bytes32";
  args: {
    0: string;
  };
}

export interface log_int {
  name: "log_int";
  args: {
    0: BN;
  };
}

export interface log_named_address {
  name: "log_named_address";
  args: {
    key: string;
    val: string;
    0: string;
    1: string;
  };
}

export interface log_named_array_string_uint256_array {
  name: "log_named_array";
  args: {
    key: string;
    val: BN[];
    0: string;
    1: BN[];
  };
}

export interface log_named_array_string_int256_array {
  name: "log_named_array";
  args: {
    key: string;
    val: BN[];
    0: string;
    1: BN[];
  };
}

export interface log_named_array_string_address_array {
  name: "log_named_array";
  args: {
    key: string;
    val: string[];
    0: string;
    1: string[];
  };
}

type log_named_array =
  | log_named_array_string_uint256_array
  | log_named_array_string_int256_array
  | log_named_array_string_address_array;

export interface log_named_bytes {
  name: "log_named_bytes";
  args: {
    key: string;
    val: string;
    0: string;
    1: string;
  };
}

export interface log_named_bytes32 {
  name: "log_named_bytes32";
  args: {
    key: string;
    val: string;
    0: string;
    1: string;
  };
}

export interface log_named_decimal_int {
  name: "log_named_decimal_int";
  args: {
    key: string;
    val: BN;
    decimals: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface log_named_decimal_uint {
  name: "log_named_decimal_uint";
  args: {
    key: string;
    val: BN;
    decimals: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface log_named_int {
  name: "log_named_int";
  args: {
    key: string;
    val: BN;
    0: string;
    1: BN;
  };
}

export interface log_named_string {
  name: "log_named_string";
  args: {
    key: string;
    val: string;
    0: string;
    1: string;
  };
}

export interface log_named_uint {
  name: "log_named_uint";
  args: {
    key: string;
    val: BN;
    0: string;
    1: BN;
  };
}

export interface log_string {
  name: "log_string";
  args: {
    0: string;
  };
}

export interface log_uint {
  name: "log_uint";
  args: {
    0: BN;
  };
}

export interface logs {
  name: "logs";
  args: {
    0: string;
  };
}

type AllEvents =
  | log
  | log_address
  | log_array
  | log_bytes
  | log_bytes32
  | log_int
  | log_named_address
  | log_named_array
  | log_named_bytes
  | log_named_bytes32
  | log_named_decimal_int
  | log_named_decimal_uint
  | log_named_int
  | log_named_string
  | log_named_uint
  | log_string
  | log_uint
  | logs;

export interface DeployFiatTokenTestInstance extends Truffle.ContractInstance {
  IS_TEST(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  excludeArtifacts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  excludeContracts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  excludeSenders(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  failed: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setUp: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  targetArtifactSelectors(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ addr: string; selectors: string[] }[]>;

  targetArtifacts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  targetContracts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  targetInterfaces(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ addr: string; artifacts: string[] }[]>;

  targetSelectors(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ addr: string; selectors: string[] }[]>;

  targetSenders(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  test_deployFiatTokenWithEnvConfigured: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  test_deployFiatTokenWithPredeployedImpl: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    IS_TEST(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    excludeArtifacts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    excludeContracts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    excludeSenders(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    failed: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    setUp: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    targetArtifactSelectors(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ addr: string; selectors: string[] }[]>;

    targetArtifacts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    targetContracts(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    targetInterfaces(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ addr: string; artifacts: string[] }[]>;

    targetSelectors(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ addr: string; selectors: string[] }[]>;

    targetSenders(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    test_deployFiatTokenWithEnvConfigured: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    test_deployFiatTokenWithPredeployedImpl: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
