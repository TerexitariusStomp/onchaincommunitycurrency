/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface MockFiatTokenWithEditableBalanceAndBlacklistStatesContract
  extends Truffle.Contract<MockFiatTokenWithEditableBalanceAndBlacklistStatesInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<MockFiatTokenWithEditableBalanceAndBlacklistStatesInstance>;
}

export interface Approval {
  name: "Approval";
  args: {
    owner: string;
    spender: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface AuthorizationCanceled {
  name: "AuthorizationCanceled";
  args: {
    authorizer: string;
    nonce: string;
    0: string;
    1: string;
  };
}

export interface AuthorizationUsed {
  name: "AuthorizationUsed";
  args: {
    authorizer: string;
    nonce: string;
    0: string;
    1: string;
  };
}

export interface Blacklisted {
  name: "Blacklisted";
  args: {
    _account: string;
    0: string;
  };
}

export interface BlacklisterChanged {
  name: "BlacklisterChanged";
  args: {
    newBlacklister: string;
    0: string;
  };
}

export interface Burn {
  name: "Burn";
  args: {
    burner: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface MasterMinterChanged {
  name: "MasterMinterChanged";
  args: {
    newMasterMinter: string;
    0: string;
  };
}

export interface Mint {
  name: "Mint";
  args: {
    minter: string;
    to: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface MinterConfigured {
  name: "MinterConfigured";
  args: {
    minter: string;
    minterAllowedAmount: BN;
    0: string;
    1: BN;
  };
}

export interface MinterRemoved {
  name: "MinterRemoved";
  args: {
    oldMinter: string;
    0: string;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface Pause {
  name: "Pause";
  args: {};
}

export interface PauserChanged {
  name: "PauserChanged";
  args: {
    newAddress: string;
    0: string;
  };
}

export interface RescuerChanged {
  name: "RescuerChanged";
  args: {
    newRescuer: string;
    0: string;
  };
}

export interface Transfer {
  name: "Transfer";
  args: {
    from: string;
    to: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface UnBlacklisted {
  name: "UnBlacklisted";
  args: {
    _account: string;
    0: string;
  };
}

export interface Unpause {
  name: "Unpause";
  args: {};
}

type AllEvents =
  | Approval
  | AuthorizationCanceled
  | AuthorizationUsed
  | Blacklisted
  | BlacklisterChanged
  | Burn
  | MasterMinterChanged
  | Mint
  | MinterConfigured
  | MinterRemoved
  | OwnershipTransferred
  | Pause
  | PauserChanged
  | RescuerChanged
  | Transfer
  | UnBlacklisted
  | Unpause;

export interface MockFiatTokenWithEditableBalanceAndBlacklistStatesInstance
  extends Truffle.ContractInstance {
  CANCEL_AUTHORIZATION_TYPEHASH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  DOMAIN_SEPARATOR(txDetails?: Truffle.TransactionDetails): Promise<string>;

  PERMIT_TYPEHASH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  RECEIVE_WITH_AUTHORIZATION_TYPEHASH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  authorizationState(
    authorizer: string,
    nonce: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  balanceOf(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  blacklist: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  blacklister(txDetails?: Truffle.TransactionDetails): Promise<string>;

  burn: {
    (
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  configureMinter: {
    (
      minter: string,
      minterAllowedAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      minter: string,
      minterAllowedAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      minter: string,
      minterAllowedAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      minter: string,
      minterAllowedAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  currency(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  decreaseAllowance: {
    (
      spender: string,
      decrement: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      spender: string,
      decrement: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string,
      decrement: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string,
      decrement: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBalanceAndBlacklistStates(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  increaseAllowance: {
    (
      spender: string,
      increment: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      spender: string,
      increment: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string,
      increment: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string,
      increment: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      tokenName: string,
      tokenSymbol: string,
      tokenCurrency: string,
      tokenDecimals: number | BN | string,
      newMasterMinter: string,
      newPauser: string,
      newBlacklister: string,
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenName: string,
      tokenSymbol: string,
      tokenCurrency: string,
      tokenDecimals: number | BN | string,
      newMasterMinter: string,
      newPauser: string,
      newBlacklister: string,
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenName: string,
      tokenSymbol: string,
      tokenCurrency: string,
      tokenDecimals: number | BN | string,
      newMasterMinter: string,
      newPauser: string,
      newBlacklister: string,
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenName: string,
      tokenSymbol: string,
      tokenCurrency: string,
      tokenDecimals: number | BN | string,
      newMasterMinter: string,
      newPauser: string,
      newBlacklister: string,
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initializeV2: {
    (newName: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initializeV2_1: {
    (lostAndFound: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      lostAndFound: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      lostAndFound: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      lostAndFound: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initializeV2_2: {
    (
      accountsToBlacklist: string[],
      newSymbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      accountsToBlacklist: string[],
      newSymbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      accountsToBlacklist: string[],
      newSymbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      accountsToBlacklist: string[],
      newSymbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  internal_balanceOf(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  internal_isBlacklisted(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  internal_setBalance: {
    (
      _account: string,
      _balance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _account: string,
      _balance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      _balance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      _balance: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  internal_setBlacklistState: {
    (
      _account: string,
      _shouldBlacklist: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _account: string,
      _shouldBlacklist: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      _shouldBlacklist: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      _shouldBlacklist: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isBlacklisted(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isMinter(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  masterMinter(txDetails?: Truffle.TransactionDetails): Promise<string>;

  mint: {
    (
      _to: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _to: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  minterAllowance(
    minter: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nonces(owner: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  pauser(txDetails?: Truffle.TransactionDetails): Promise<string>;

  removeMinter: {
    (minter: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  rescueERC20: {
    (
      tokenContract: string,
      to: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenContract: string,
      to: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenContract: string,
      to: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenContract: string,
      to: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  rescuer(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setBalanceAndBlacklistStates: {
    (
      _account: string,
      _state: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _account: string,
      _state: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      _state: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      _state: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transfer: {
    (
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string,
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      from: string,
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      from: string,
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string,
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unBlacklist: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  updateBlacklister: {
    (_newBlacklister: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _newBlacklister: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newBlacklister: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newBlacklister: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateMasterMinter: {
    (_newMasterMinter: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _newMasterMinter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newMasterMinter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newMasterMinter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updatePauser: {
    (_newPauser: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _newPauser: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newPauser: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newPauser: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateRescuer: {
    (newRescuer: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newRescuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newRescuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newRescuer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  version(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    CANCEL_AUTHORIZATION_TYPEHASH(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    DOMAIN_SEPARATOR(txDetails?: Truffle.TransactionDetails): Promise<string>;

    PERMIT_TYPEHASH(txDetails?: Truffle.TransactionDetails): Promise<string>;

    RECEIVE_WITH_AUTHORIZATION_TYPEHASH(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    approve: {
      (
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    authorizationState(
      authorizer: string,
      nonce: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    balanceOf(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    blacklist: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    blacklister(txDetails?: Truffle.TransactionDetails): Promise<string>;

    burn: {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    configureMinter: {
      (
        minter: string,
        minterAllowedAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        minter: string,
        minterAllowedAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        minter: string,
        minterAllowedAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        minter: string,
        minterAllowedAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    currency(txDetails?: Truffle.TransactionDetails): Promise<string>;

    decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    decreaseAllowance: {
      (
        spender: string,
        decrement: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        spender: string,
        decrement: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        spender: string,
        decrement: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        spender: string,
        decrement: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getBalanceAndBlacklistStates(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    increaseAllowance: {
      (
        spender: string,
        increment: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        spender: string,
        increment: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        spender: string,
        increment: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        spender: string,
        increment: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initialize: {
      (
        tokenName: string,
        tokenSymbol: string,
        tokenCurrency: string,
        tokenDecimals: number | BN | string,
        newMasterMinter: string,
        newPauser: string,
        newBlacklister: string,
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenName: string,
        tokenSymbol: string,
        tokenCurrency: string,
        tokenDecimals: number | BN | string,
        newMasterMinter: string,
        newPauser: string,
        newBlacklister: string,
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenName: string,
        tokenSymbol: string,
        tokenCurrency: string,
        tokenDecimals: number | BN | string,
        newMasterMinter: string,
        newPauser: string,
        newBlacklister: string,
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenName: string,
        tokenSymbol: string,
        tokenCurrency: string,
        tokenDecimals: number | BN | string,
        newMasterMinter: string,
        newPauser: string,
        newBlacklister: string,
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initializeV2: {
      (newName: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initializeV2_1: {
      (lostAndFound: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        lostAndFound: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        lostAndFound: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        lostAndFound: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initializeV2_2: {
      (
        accountsToBlacklist: string[],
        newSymbol: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        accountsToBlacklist: string[],
        newSymbol: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        accountsToBlacklist: string[],
        newSymbol: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        accountsToBlacklist: string[],
        newSymbol: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    internal_balanceOf(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    internal_isBlacklisted(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    internal_setBalance: {
      (
        _account: string,
        _balance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _account: string,
        _balance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        _balance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        _balance: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    internal_setBlacklistState: {
      (
        _account: string,
        _shouldBlacklist: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _account: string,
        _shouldBlacklist: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        _shouldBlacklist: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        _shouldBlacklist: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isBlacklisted(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isMinter(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    masterMinter(txDetails?: Truffle.TransactionDetails): Promise<string>;

    mint: {
      (
        _to: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _to: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _to: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _to: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    minterAllowance(
      minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    name(txDetails?: Truffle.TransactionDetails): Promise<string>;

    nonces(owner: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    pauser(txDetails?: Truffle.TransactionDetails): Promise<string>;

    removeMinter: {
      (minter: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    rescueERC20: {
      (
        tokenContract: string,
        to: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenContract: string,
        to: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenContract: string,
        to: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenContract: string,
        to: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    rescuer(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setBalanceAndBlacklistStates: {
      (
        _account: string,
        _state: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _account: string,
        _state: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        _state: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        _state: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

    totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    transfer: {
      (
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferFrom: {
      (
        from: string,
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        from: string,
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    unBlacklist: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    unpause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    updateBlacklister: {
      (
        _newBlacklister: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _newBlacklister: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _newBlacklister: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _newBlacklister: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateMasterMinter: {
      (
        _newMasterMinter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _newMasterMinter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _newMasterMinter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _newMasterMinter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updatePauser: {
      (_newPauser: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _newPauser: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _newPauser: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _newPauser: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateRescuer: {
      (newRescuer: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newRescuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newRescuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newRescuer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    version(txDetails?: Truffle.TransactionDetails): Promise<string>;

    "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)": {
      (
        authorizer: string,
        nonce: string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        authorizer: string,
        nonce: string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        authorizer: string,
        nonce: string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        authorizer: string,
        nonce: string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "cancelAuthorization(address,bytes32,bytes)": {
      (
        authorizer: string,
        nonce: string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        authorizer: string,
        nonce: string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        authorizer: string,
        nonce: string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        authorizer: string,
        nonce: string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "permit(address,address,uint256,uint256,bytes)": {
      (
        owner: string,
        spender: string,
        value: number | BN | string,
        deadline: number | BN | string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        owner: string,
        spender: string,
        value: number | BN | string,
        deadline: number | BN | string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        owner: string,
        spender: string,
        value: number | BN | string,
        deadline: number | BN | string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        owner: string,
        spender: string,
        value: number | BN | string,
        deadline: number | BN | string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
      (
        owner: string,
        spender: string,
        value: number | BN | string,
        deadline: number | BN | string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        owner: string,
        spender: string,
        value: number | BN | string,
        deadline: number | BN | string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        owner: string,
        spender: string,
        value: number | BN | string,
        deadline: number | BN | string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        owner: string,
        spender: string,
        value: number | BN | string,
        deadline: number | BN | string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,bytes)": {
      (
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
      (
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,bytes)": {
      (
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
      (
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        to: string,
        value: number | BN | string,
        validAfter: number | BN | string,
        validBefore: number | BN | string,
        nonce: string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
