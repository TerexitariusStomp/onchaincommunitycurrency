/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FiatTokenUtilContract
  extends Truffle.Contract<FiatTokenUtilInstance> {
  "new"(
    fiatToken: string,
    meta?: Truffle.TransactionDetails
  ): Promise<FiatTokenUtilInstance>;
}

export interface TransferFailed {
  name: "TransferFailed";
  args: {
    authorizer: string;
    nonce: string;
    0: string;
    1: string;
  };
}

type AllEvents = TransferFailed;

export interface FiatTokenUtilInstance extends Truffle.ContractInstance {
  transferWithMultipleAuthorizations: {
    (
      params: string,
      signatures: string,
      atomic: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      params: string,
      signatures: string,
      atomic: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      params: string,
      signatures: string,
      atomic: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      params: string,
      signatures: string,
      atomic: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    transferWithMultipleAuthorizations: {
      (
        params: string,
        signatures: string,
        atomic: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        params: string,
        signatures: string,
        atomic: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        params: string,
        signatures: string,
        atomic: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        params: string,
        signatures: string,
        atomic: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
